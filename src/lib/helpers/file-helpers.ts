import fs from 'fs';
import gfs from 'graceful-fs';
import path from 'path';
import typescriptParser from 'prettier/parser-typescript';
import prettier from 'prettier/standalone';
import util from 'util';

gfs.gracefulify(fs);

const readfileFromFS = util.promisify(fs.readFile);
const writeFileToFS = util.promisify(fs.writeFile);

const fileComment = '/* ðŸ¤– this file was generated by svg-to-ts */\n';

export enum FILE_TYPE {
  TS = 'ts',
  TSX = 'tsx'
}

export const extractSvgContent = async (filePath: string): Promise<string> => {
  const fileContentRaw = await readfileFromFS(filePath, 'utf-8');
  return fileContentRaw.replace(/\r?\n|\r/g, ' ');
};

export async function writeFile(
  outputDirectory: string,
  fileName: string,
  fileContent: string,
  fileType = FILE_TYPE.TS
): Promise<void> {
  const formattedFileContent =
    fileType === FILE_TYPE.TS ? formatContent(`${fileComment}${fileContent}`) : `${fileComment}${fileContent}`;
  if (!fs.existsSync(outputDirectory)) {
    fs.mkdirSync(outputDirectory, { recursive: true });
  }
  await writeFileToFS(path.join(outputDirectory, `${fileName}.${fileType}`), formattedFileContent);
}

export const readFile = async (filePath: string): Promise<string> => {
  return readfileFromFS(filePath, 'utf-8');
};

export const deleteFolder = async (directoryPath: string) => {
  if (fs.existsSync(directoryPath)) {
    fs.readdirSync(directoryPath).forEach((filePath: string) => {
      const curPath = directoryPath + '/' + filePath;
      if (fs.lstatSync(curPath).isDirectory()) {
        deleteFolder(curPath);
      } else {
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(directoryPath);
  }
};

export const deleteFiles = (filePaths: string[]): void => {
  filePaths.forEach((filePath: string) => fs.unlinkSync(filePath));
};

const formatContent = (fileContent: string) =>
  prettier.format(fileContent, {
    parser: 'typescript',
    plugins: [typescriptParser],
    singleQuote: true
  });
